{
	"info": {
		"_postman_id": "f0dba3bf-177a-4968-8705-c5405927536d",
		"name": "Ksendzov Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23794826"
	},
	"item": [
		{
			"name": "/get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name=Daria&age=32",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Daria"
						},
						{
							"key": "age",
							"value": "32"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=Daria&age=32&weight=60",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Daria"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "weight",
							"value": "60"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name=Daria&age=32&salary=1050",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Daria"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1050"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data(lesson)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age\r",
							"\r",
							"var req = request.data\r",
							"var req_age = +req.age;\r",
							"var req_url = pm.request.url.query.toObject();;\r",
							"\r",
							"console.log(\"Req_url = \" + req_url.user_name)\r",
							"console.log(\"Resp_age = \" + resp_age)\r",
							"console.log(\"Req_age = \" + req_age)\r",
							"\r",
							"\r",
							"pm.test(\"Req_Resp_AGE_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Daria",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data?user_name=Daria",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					],
					"query": [
						{
							"key": "user_name",
							"value": "Daria"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info(lesson)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp_json = pm.response.json();\r",
							"var resp_u_age = resp_json.person.u_age;\r",
							"var resp_salary = resp_json.person.u_name[1];\r",
							"\r",
							"var req = request.data;\r",
							"\r",
							"var req_raw_json = JSON.parse(pm.request.body.raw);\r",
							"var req_age = req_raw_json.age;\r",
							"var req_salary = req_raw_json.salary;\r",
							"\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"console.log(\"req_raw = \", req_raw_json.salary )\r",
							"console.log(\"req_age = \", req_age )\r",
							"console.log(\"resp_u_age = \", resp_u_age )\r",
							"console.log(\"resp_salary = \", resp_salary )\r",
							"\r",
							"pm.test(\"Req_Resp_AGE_check\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_u_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Req_Resp_Salary_check\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 32,\r\n    \"salary\" : 1000,\r\n    \"name\" : \"Daria\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1\r",
							"pm.test(\"Request was sent successfully\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"//2\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1\r",
							"pm.test(\"Request was sent successfully\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"//2\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4\r",
							"var resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"Resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Daria\");\r",
							"});\r",
							"\r",
							"//5\r",
							"var resp_age = +jsonData.age\r",
							"\r",
							"pm.test(\"Resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(32);\r",
							"});\r",
							"\r",
							"//6 \r",
							"var resp_salary = jsonData.salary\r",
							"\r",
							"pm.test(\"Resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//7\r",
							"var req = request.data\r",
							"\r",
							"//8\r",
							"var req_name = req.name;\r",
							"\r",
							"pm.test(\"Req_Resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9 \r",
							"var req_age = +req.age;\r",
							"\r",
							"pm.test(\"Req_Resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//10 \r",
							"var req_salary = +req.salary;\r",
							"\r",
							"pm.test(\"Req_Resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//11\r",
							"var resp_family = jsonData.family\r",
							"console.log(resp_family)\r",
							"\r",
							"//12\r",
							"pm.test(\"u_salary_1_5_year_check\", function () {\r",
							"    pm.expect(resp_family.u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Daria",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1 Отправить запрос\r",
							"pm.test(\"Request was sent successfully\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"//2 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3 Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4 Спарсить request\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"console.log(req_url)\r",
							"\r",
							"//5 Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"var resp_name = jsonData.name;\r",
							"var req_name = pm.request.url.query.get(\"name\");\r",
							"\r",
							"pm.test(\"Req_Resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6 Проверить, что age в ответе равно age в request (age забрать из request)\r",
							"var resp_age = jsonData.age;\r",
							"var req_age = pm.request.url.query.get(\"age\");\r",
							"pm.test(\"Req_Resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//7 Проверить, что salary в ответе равно salary в request (salary забрать из request)\r",
							"var resp_salary = jsonData.salary;\r",
							"var req_salary = +pm.request.url.query.get(\"salary\");\r",
							"pm.test(\"Req_Resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//8 Вывести в консоль параметр family из response\r",
							"var resp_family = jsonData.family\r",
							"console.log(resp_family)\r",
							"\r",
							"//9 Проверить, что у параметра dog есть параметры name\r",
							"var resp_dog = resp_family.pets.dog\r",
							"console.log(resp_dog)\r",
							"\r",
							"pm.test(\"Dog has name property\", function() {\r",
							"    pm.expect(resp_dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10 Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has age property\", function() {\r",
							"    pm.expect(resp_dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11 Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Resp_Dog_name_Lucky\", function () {\r",
							"    pm.expect(resp_dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12 Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Resp_Dog_age_4\", function () {\r",
							"    pm.expect(resp_dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Daria&age=32&salary=1050",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Daria"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1050"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1 Отправить запрос\r",
							"pm.test(\"Request was sent successfully\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"//2 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3 Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4 Спарсить request\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"//5 Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"var resp_name = jsonData.name;\r",
							"var req_name = pm.request.url.query.get(\"name\");\r",
							"\r",
							"pm.test(\"Req_Resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6 Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"var resp_age = jsonData.age;\r",
							"var req_age = +pm.request.url.query.get(\"age\");\r",
							"pm.test(\"Req_Resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//7 Вывести в консоль параметр salary из request\r",
							"var req_salary = +pm.request.url.query.get(\"salary\");\r",
							"console.log(req_salary)\r",
							"\r",
							"//8 Вывести в консоль параметр salary из response\r",
							"var resp_salary = jsonData.salary;\r",
							"console.log(resp_salary)\r",
							"\r",
							"//9 Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp_salary[0])\r",
							"\r",
							"//10 Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(resp_salary[1])\r",
							"\r",
							"//11 Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(resp_salary[2])\r",
							"\r",
							"//12 Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Req_Resp[0]_salary_check\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//13 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Req*2_Resp[1]_salary_check\", function () {\r",
							"    pm.expect(+resp_salary[1]).to.eql(req_salary*2);\r",
							"});\r",
							"//14 Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Req*3_Resp[2]_salary_check\", function () {\r",
							"    pm.expect(+resp_salary[2]).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"//15 Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"\");\r",
							"\r",
							"//16 Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"\");\r",
							"\r",
							"//17 Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"\");\r",
							"\r",
							"//18 Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Daria\");\r",
							"\r",
							"//19 Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"32\");\r",
							"\r",
							"//20 Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1050\");\r",
							"\r",
							"//21 Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"var numb = 0\r",
							"do {\r",
							"  console.log(resp_salary[numb])\r",
							"  var numb = numb+1\r",
							"} while (numb < 3);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Daria&age=32&salary=1050",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Daria"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1050"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1 Вставить параметр salary из окружения в request\r",
							"var env_salary = pm.environment.get(\"salary\");\r",
							"var req = request.data;\r",
							"req.salary = env_salary;\r",
							"console.log(req.salary)\r",
							"\r",
							"//2 Вставить параметр age из окружения в age\r",
							"var env_age = pm.environment.get(\"age\");\r",
							"if (req.age == env_age) {\r",
							"  console.log(req.age);\r",
							"} else {\r",
							"  prev_req_age = req.age;\r",
							"  req.age = env_age;\r",
							"  console.log(\"Age changed from \" + prev_req_age + \" to \" + env_age);\r",
							"}\r",
							"\r",
							"//3 Вставить параметр name из окружения в name\r",
							"var env_name = pm.environment.get(\"name\");\r",
							"var req = request.data;\r",
							"req.name = env_name;\r",
							"console.log(req.name)\r",
							"\r",
							"//4 Отправить запрос\r",
							"pm.test(\"Request was sent successfully\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"//5\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6 Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"//7 Спарсить request\r",
							"var req = request.data\r",
							"console.log(req.salary)\r",
							"\r",
							"//8 Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Resp_has_start_qa_salary_property\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Resp_has_qa_salary_after_6_months_property\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Resp_has_qa_salary_after_12_months_property\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Resp_has_qa_salary_after_1.5_year_property\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Resp_has_qa_salary_after_3.5_years_property\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Resp_has_person_property\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"start_qa_salary_vs_req_salary_check\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_6_months_vs_req_salary*2_check\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_12_months_vs_req_salary*2.7_check\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_1.5_year_vs_req_salary*3.3_check\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"qa_salary_after_3.5_year_vs_req_salary*3.8_check\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"u_name_salary_vs_req_salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"u_age_vs_req_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"u_salary_5_years_vs_req_salary*4.2_check\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"var person = Object.keys(jsonData.person)\r",
							"\r",
							"for (var i=0; i < person.length; i ++) {\r",
							"    console.log(person[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var resp_token = jsonData.token\r",
							"console.log(resp_token)\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Daria",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Hello",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"    \r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months_check\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months_check\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_1_5_year_check\", function () {\r",
							"    pm.expect(jsonData.person[\"u_salary_1_5_year\"]).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"var salary = jsonData.person[\"u_salary_1_5_year\"]\r",
							"pm.environment.set(\"salary\", salary);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 32,\r\n    \"salary\" : 1000,\r\n    \"name\" : \"Daria\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата и перемножения на коэффициент\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"salary[1]_check\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"salary[2]_check\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"2>1_check\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Daria",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data?user_name=Daria",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					],
					"query": [
						{
							"key": "user_name",
							"value": "Daria"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"weight * 0.012_check\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(req.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"weight * 2.5_check\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(req.weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Melissa",
							"type": "text"
						},
						{
							"key": "age",
							"value": "12",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "2",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"// 4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Daria",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Взять любой объект из списка body, использовать js random\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"var choose = Object.keys(jsonData)[_.random(0, 118)]\r",
							"console.log(choose)\r",
							"\r",
							"// 2) В объекте возьмите Cur_ID и передать через окружение в следующий запрос\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", choose);\r",
							"\r",
							"// ===============\r",
							"// ***\r",
							"// 1) получить список валют\r",
							"\r",
							"console.log(jsonData)\r",
							"\r",
							"// 2) итерировать список валют\r",
							"\r",
							"// for (var i of Object.keys(jsonData)) {\r",
							"//   console.log(\"iter \", i, \"is \", jsonData[i].Cur_Name);\r",
							"// }\r",
							"\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"const postRequest = {\r",
							"  url: 'http://54.157.99.22:80/curr_byn',\r",
							"  method: 'POST',\r",
							"  body: {\r",
							"    mode: 'formdata',\r",
							"          formdata: [\r",
							"            {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"            {key: \"curr_code\", value: pm.environment.get(\"Cur_ID\")}]\r",
							"  }\r",
							"};\r",
							"\r",
							"\r",
							"for (var i in Object.keys(jsonData)) {\r",
							"\r",
							"    var choose = Object.keys(jsonData)[i]\r",
							"    pm.environment.set(\"Cur_ID\", choose);\r",
							"\r",
							"    const postRequest = {\r",
							"        url: 'http://54.157.99.22:80/curr_byn',\r",
							"        method: 'POST',\r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"            {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"            {key: \"curr_code\", value: pm.environment.get(\"Cur_ID\")}]\r",
							"        }\r",
							"    };\r",
							"\r",
							"\r",
							"    pm.sendRequest(postRequest, (error, response) => {\r",
							"        if (error) {\r",
							"            console.log(\"500 Server Error\", error);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        if (response.code === 200 && response.json().Cur_OfficialRate !== undefined) {\r",
							"            console.log(error ? error : Object.keys(response.json())[0], \":\", Object.values(response.json())[0], \"\\n\",\r",
							"                                        Object.keys(response.json())[1], \":\", Object.values(response.json())[1], \"\\n\", \r",
							"                                        Object.keys(response.json())[2], \":\", Object.values(response.json())[2], \"\\n\",\r",
							"                                        Object.keys(response.json())[3], \":\", Object.values(response.json())[3], \"\\n\",\r",
							"                                        Object.keys(response.json())[4], \":\", Object.values(response.json())[4], \"\\n\",\r",
							"                                        Object.keys(response.json())[5], \":\", Object.values(response.json())[5], \"\\n\"\r",
							"        );} \r",
							"        \r",
							"        else {\r",
							"            console.log(\"Invalid response:\", response.code);\r",
							"        }\r",
							"    })\r",
							"\r",
							"}\r",
							"\r",
							"// console.log(error ? error : Object.values(response.json())[2], Object.values(response.json())[3]);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('JSON schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}